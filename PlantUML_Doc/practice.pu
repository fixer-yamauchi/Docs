@startuml
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response
Alice -> Bob: Another authentication Request
Alice <-- Bob: Another authentication Re∂sponse
@enduml

@startuml
actor Foo1
boundary Foo2
control Foo3
entity Foo4
database Foo5
collections Foo6
Foo1 -> Foo2 : To boundary
Foo1 -> Foo3 : To control
Foo1 -> Foo4 : To entity
Foo1 -> Foo5 : To database
Foo1 -> Foo6 : To collections
@enduml

@startuml
actor Bob #red
' The only difference between actor
'and participant is the drawing
participant Alice
participant "I have a really\nlong name" as L #99FF99
/'  You can also declare:
    participant L as "I have a really \nlong name" #99FF99
    '/
Alice -> Bob : Authentication Request
Bob -> Alice : Authentication Response
Bob -> L : Log transaction
@enduml

@startuml
participant Last order 30
participant Middle order 20
participant First order 10
@enduml

@startuml
Alice -> "Bob()" : Hello
"Bob()" -> "This is very\nlong" as Long
' You can also declare:
' "Bob()" -> Long as "This is very\nlong"
Long -> "Bob()" : ok
@enduml

@startuml
Alice -> Alice : This is a signal to self.\nIt also demontrates\nmultiline \ntext
@enduml

@startuml
Bob ->x Alice
Bob -> Alice
Bob ->> Alice
Bob -\ Alice
Bob \\- Alice
Bob //-- Alice
Bob ->o Alice
Bob o\\-- Alice
Bob <-> Alice
Bob <->o Alice
@enduml

@startuml
Bob -[#red]> Alice : hello
Alice -[#0000FF]-> Bob : ok
@enduml

@startuml
autonumber
Bob -> Alice : Authentication Request
Bob <- Alice : Authentication Response
@enduml

@startuml
autonumber
Bob -> Alice : Authentication Request
Bob <- Alice : Authentication Response

autonumber 15
Bob -> Alice : Another authentication Request
Bob <- Alice : Another authentication Response

autonumber 40 10
Bob -> Alice : Yet another authentication Request
Bob <- Alice : Yet another authentication Respons
@enduml

@startuml
autonumber "<b>[000]"
Bob -> Alice : Authentication Request
Bob <- Alice : Authentication Response

autonumber 15 "<b>(<u>##</u>)"
Bob -> Alice : Another authentication Request
Bob <- Alice : Another authentication Response

autonumber 40 10 "<font color=red><b>Message 0  "
Bob -> Alice : Yet another authentication Request
Bob <- Alice : Yet another authentication Respons
@enduml

@startuml
autonumber 10 10 "<b>[000]"
Bob -> Alice : Authentication Request
Bob <- Alice : Authentication Response

autonumber stop
Bob -> Alice : dummy

autonumber resume "<font color=red><b>Message 0  "
Bob -> Alice : Yet another authentication Request
Bob <- Alice : Yet another authentication Respons

autonumber stop
Bob -> Alice : dummy

autonumber resume 1 "<font color=blue><b>Message 0  "
Bob -> Alice : Yet another authentication Request
Bob <- Alice : Yet another authentication Respons
@enduml

@startuml
header Page Header
footer Page %page% of %lastpage%

title Example Title

Alice -> Bob : message 1
Alice -> Bob : message 2
@enduml

@startuml
Alice -> Bob : message 1
Alice -> Bob : message 2

newpage

Alice -> Bob : message 3
Alice -> Bob : message 4

newpage A little for the\nlast page

Alice -> Bob : message 5
Alice -> Bob : message 6
@enduml

@startuml
Alice -> Bob : Authentication Request

alt successful case

Bob -> Alice : Authentication Accepted

else some kind of failure

Bob -> Alice : Authentication Failure
group My own label
Alice -> Log : Log attack start
    loop 1000 times
        Alice -> Bob : DNS Attack
    end
Alice -> Log : Log attack end
end

else Another type of failure

    Bob -> Alice : Please repeat

end
@enduml

@startuml
Alice -> Bob : hello
note left : this is a first note

Bob -> Alice : ok
note right : this is another note

Bob -> Bob : I am thinking
note left
a note
can also be difined
on several lines
end note
@enduml

@startuml
participant Alice
participant Bob
note left of Alice #aqua
This is displayed
left of Alice.
end note

note right of Alice : This is displayed right of Alice

note over Alice, Bob #FFAAAA : This is displayed\n over Bob and Alice.

note over Bob, Alice
This is yet another
example of
a long note.
end note
@enduml

@startuml
caller -> server : conReq
hnote over caller : idle
caller <- server : conConf
rnote over server
"r" as rectangle
"h" as hexagon
endnote
@enduml

@startuml
participant Alice
participant "The **Famous** Bob" as Bob

Alice -> Bob : hello --there--
... Some ~~long delay~~ ...
Bob -> Alice : ok
note left 
    This is **bold**
    This is //italics//
    This is ""monospaced""
    This is --stroked--
    This is __underlined__
    This is ~~waved~~
end note

Alice -> Bob : A //well formatted// message
note right of Alice
    This is <back:cadetblue><size:18>displayed</size></back>
    __left of __ Alice.
end note

note left of Bob
    <u:red>This</u> is <color #118888>displayed</color>
    **<color purple>left of</color> <s:red>Alice</strike> Bob**.
end note

note over Alice, Bob
    <w:#FF33FF>This is hosted</w> by <img sourceforge.jpg>
end note
@enduml

@startuml

== Initialization ==

Alice -> Bob : Authentication Request
Bob -> Alice : Authentication Response

== Repetition ==

Alice -> Bob : Another authentication Request
Bob -> Alice : Another authentication Response

@enduml

@startuml
participant Alice
actor Bob

ref over Alice, Bob : Init

Alice -> Bob : hello

ref over Bob
    This can be on
    several lines
end ref
@enduml

@startuml
Alice -> Bob : Authentication Request
...
Bob --> Alice : Authentication Response
... 5 minutes latter...
Bob --> Alice : Bye !
@enduml

@startuml
Alice -> Bob : message 1
Bob --> Alice : ok
|||
Alice -> Bob : message 2
Bob --> Alice : ok
||100||
Alice -> Bob : message 3
Bob --> Alice : ok
@enduml

@startuml
participant User

User -> A : DoWrok
activate A

A -> B : << createReuest >>
activate B

B -> C : DoWork
activate C
C --> B : WorkDone
destroy C

B --> A : RequestCreated
deactivate B

A --> User : Done
Deactivate A
@enduml

@startuml
participant User

User -> A : DoWork
activate A #FFBBBB

A -> A : Internal Call
activate A #DarkSalmon

A -> B : << createRequest >>
activate B

B --> A : RequestCreated
deactivate B
deactivate A
A -> User : Done
deactivate A
@enduml

@startuml
Bob -> Alice : hello
activate Alice
Alice -> Alice : some action
return bye
@enduml

@startuml
Bob -> Alice : hello

create Other
Alice -> Other : new

create control String
Alice -> String

note right : You can also put notes!

Alice -> Bob : ok
@enduml

@startuml
[-> A : DoWork

activate A

A -> A : Internal call
activate A

A ->] : << createRequest >>

A <--] : RequestCreated
deactivate A
[<- A : Done
deactivate A
@enduml

@startuml
[-> Bob
[o-> Bob
[o->o Bob
[x-> Bob
[<- Bob
[x<- Bob

Bob ->]
Bob ->o]
Bob o->o]
Bob ->x]
Bob <-]
Bob x<-]
@enduml

@startuml

participant "Famous Bob" as Bob << Generated >>
participant Alice << (C,#ADD1B2) Testable >>

Bob ->  Alice: First message

@enduml

@startuml
skinparam Guillemet false
participant "Famous Bob" as Bob << Generated >>
participant Alice << (C,#ADD1B2) Testable >>

Bob -> Alice: First message
@enduml

@startuml
participant Bob << (C,#ADD1B2) >>
participant Alice << (C,#ADD1B2) >>

Bob -> Alice: First message
@enduml

@startuml
title __Simple__ **communication** example

Alice -> Bob: Authentication Request
Bob -> Alice: Authentication Response
@enduml

@startuml
title __Simple__ **communication** example\non several lines
Alice -> Bob: Authentication Request
Bob -> Alice: Authentication Response

@enduml

@startuml
title
    <u>Simple</u> communication example
    on <i>several</i> lines and using <font color=red>html</font>
    This is hosted by <img:sorceforge.jpg>
end title

Alice -> Bob: Authentication Request
Bob -> Alice: Authentication Response
@enduml

@startuml
box "Internal Service" #LightBlue
participant Bob
participant Alice
end box
participant Other

Bob -> Alice : hello
Alice -> Other : hello
@enduml

@startuml
hide footbox
title Footer removed

Alice -> Bob : Authentication Request
Bob -> Alice : Authentication Response
@enduml

@startuml
skinparam SequenceArrowThickness 2
skinparam RoundCorner 20
skinparam MaxMessageSize 60
skinparam SequenceParticipant underline

actor User
participant "First Class" as A
participant "Second Class" as B
participant "Last Class" as C

User -> A: DoWork
activate A

A -> B: Create Request
activate B

B -> C: DoWork
activate C
C --> B: WorkDone
destroy C

B --> A: Request Created
deactivate B

A --> User: Done
deactivate A

@enduml

@startuml
skinparam BackgroundColor #EEEBDC
skinparam Handwritten true

skinparam sequence {
    ArrowColor DeepSkyBlue
    ActorBorderColor DeepSkyBlue
    LifeLineBorderColor blue
    LifeLineBackgroundColor #A9DCDF

    ParticipantBorderColor DeepSkyBlue
    ParticipantBackgroundColor DodgerBlue
    ParticipantFontName Impact
    ParticipantFontSize 17
    ParticipantFontColor #A9DCDF

    ActorBackgroundColor aqua
    ActorFontColor DeepSkyBlue
    ActorFontSize 17
    ActorFontSize Aapex
}

actor User
participant "First Class" as A
participant "Second Class" as B
participant "Last Class" as C

User -> A: DoWork
activate A

A -> B: Create Request
activate B

B -> C: DoWork
activate C
C --> B: WorkDone
destroy C

B --> A: Request Created
deactivate B

A --> User: Done
deactivate A

@enduml

@startuml
skinparam ParticipantPadding 20
skinparam BoxPadding 10

box "Foo1"
participant Alice1
participant Alice2
end box

box "Foo2"
participant Bob1
participant Bob2
end box

Alice1 -> Bob1: hello
Alice1 -> Out: out
@enduml

ユースケース図

@startuml
(First usecase)
(Another usecase) as (UC2)
usecase UC3
usecase (Last\nusecase) as UC4
@enduml

@startuml
:First Actor:
:Another\nactor: as Men2
actor Men3
actor :Last actor: as Men4
@enduml

@startuml
usecase UC1 as "You can use
several lines to define your usecase.
You can also use separators.
--
Several separators are possible.
==
And you can add titles:
..Conclusion..
This allows large descriptiopn."
@enduml

@startuml
User -> (Start)
User --> (Use the application) : A small label

:Main Admin: ---> (Use the application) : This is\nyet another\nlabel
@enduml

@startuml
:Main Admin: as Admin
(Use the application) as (Use)

User <|-- Admin
(Start) <|-- (Use)
@enduml

@startuml
:Main Admin: as Admin
(Use the application) as (Use)

User -> (Start)
User --> (Use)

Admin ---> (Use)

note right of Admin: This is an example.

note right of (Use)
    A note can also
    be on several lines
end note

note "This note is connected\nto several objects." as N2
(Start) .. N2
N2 .. (Use)
@enduml

@startuml
User << Human >>
:Main Database: as MySql << Application >>
(Start) << One Shot >>
(Use the application) as (Use) << Main >>

User -> (Start)
User --> (Use)

MySql --> (Use)
@enduml

@startuml
:user: --> (Use case 1)
:user: -> (Use case 2)
@enduml

@startuml
(Use case 1) <.. :user:
(Use case 2) <- :user:
@enduml

@startuml
:user: -left-> (dummyLeft)
:user: -right-> (dummyRight)
:user: -up-> (dummyUp)
:user: -down-> (dummyDown)
@enduml

@startuml
:actor1: --> (Usecase1)
newpage
:actor2: --> (Usecase2)
@enduml

@startuml
'default
top to bottom direction
user1 --> (Usecase 1)
user2 --> (Usecase 2)
@enduml

@startuml
left to right direction
user1 --> (Usecase 1)
user2 --> (Usecase 2)
@enduml

@startuml
skinparam Handwritten true

skinparam usecase {
    BackgroundColor DarkSeaGreen
    BorderColor DarkSlateGray

    BackgroundColor<< Main >> YellowGreen
    BorderColor<< Main >> YellowGreen

    ArrowColor Olive
    ActorBorderColor black
    ActorFontName Courier

    ActorBackgroundColor<< Human >> Gold
}

User << Human >>
:Main Database: as MySql << Application >>
(Start) << One Shot >>
(Use the application) as (Use) << Main >>

User -> (Start)
User --> (Use)

MySql --> (Use)
@enduml

@startuml
left to right direction
skinparam PackageStyle rectangle
actor customer
actor clerk
rectangle checkout {
    customer -- (checkout)
    (checkout) .> (payment) : include
    (help) .> (checkout) : extends
    (checkout) -- clerk
}
@enduml

@startuml
Class01 <|-- Class02
Class03 *-- Class04
Class05 o-- Class06
Coass07 .. Class08
Class09 -- Class10
@enduml

@startuml
Class11 <|.. Class12
Class13 --> Class14
Class15 ..> Class16
Class17 ..|> Class18
Class19 <--* Class20
@enduml

@startuml
Class21 #-- Class22
Class23 x-- Class24
Class25 }-- Class26
Class27 +-- Class28
Class29 ^-- Class30
@enduml

@startuml
Class01 "1" *-- "many" Class02 : contains
Class03 o-- Class04 : aggregation
Class05 --> "1" Class06
@enduml

@startuml
class Car

Driver - Car : drives >
Car *- Wheel : have 4 >
Car -- Person : < owns
@enduml

@startuml
Object <|-- ArrayList

Object : equals()
ArrayList : Object[] elementData
ArrayList : size()
@enduml

@startuml
Class Dummy {
    String data
    void methods()
}

class Fright {
    flightNumber : Integer
    depatureTime : Date
}
@enduml

@startuml
class Dummy {
    {field} A field (despite parentheses)
    {method} Some method
}
@enduml

@startuml
class Dummy {
    -field1
    #field1
    -method1()
    +method2()
}
@enduml

@startuml
skinparam ClassAttributeIconSize 0
class Dummy {
    -field1
    #field1
    -method1()
    +method2()
}
@enduml

@startuml
class Dummy {
    {static} String id
    {abstract} void methods()
}
@enduml

@startuml
class Foo1 {
    You can use
    several lines
    ..
    as you want
    and group
    ==
    things together.
    __
    You can have as many groups
    as you want
    __
    End of class
}

class User {
    .. Simple Getter ..
    + getName()
    + getAddress()
    .. Some setter ..
    + setName()
    __ private data __
    int age
    -- encrypted --
    String password
}
@enduml

@startuml
class Object << general >>
Object <|--- ArrayList

note top of Object : In java, every class\nextends this one.

note "This is a floating note" as N1
note "This note is connected\nto several objectsl." as N2
Object .. N2
N2 .. ArrayList

class Foo
note left : On last defined class
@enduml

@startuml
class Foo
note left : On last defined class

note top of Object
    In Java, <size:18>every</size> <u>class</u>
    <b>extends</b>
    <i>this</i> one.
end note

note as N1
    This note is <u>also</u>
    <b><color:RoyalBlue>on several</color>
    <s>words</s> lines
    And this is hosted by <img:sourceforge.jpg>
end note
@enduml

@startuml
class Dummy
Dummy --> Foo : A link
note on link #red: note that is red

Dummy --> Foo2 : Another link
note right on link #Blue
this is my note on right link
and in blue
end note

@enduml

@startuml
abstract class AbstractList
abstract AbstractCollection
interface List
interface Collection

List <|-- AbstractList
Collection <|-- AbstractCollection

Collection <|- List
AbstractCollection <|- AbstractList
AbstractList <|-- ArrayList

class ArrayList {
    Object[] elementData
    size()
}

enum TimeUnit {
    DAYS
    HOURS
    MINUTES
}

annotation SuppressWarnings
@enduml

@startuml
class "This is my class" as class1
class class2 as "It works this way too"

class2 *-- "foo/dummy" : use
@enduml

@startuml
class Dummy1 {
    +myMethods()
}
class Dummy2 {
    +hiddemMethod()
}
class Dummy3 <<Serializable>> {
    String name
}

hide members
hide <<Serializable>> circle
show Dummy1 Methods
show <<Serializable>> fields
@enduml

@startuml
class Foo1
class Foo2

Foo2 *-- Foo1

hide Foo2
@enduml

@startuml
class Foo<? extends Element> {
    int size()
}
Foo *- Element
@enduml

@startuml
class System << (S,#FF7700) Singleton >>
class Date << (D,Orchid) >>
@enduml

@startuml
package "Classic Collections" #DDDDDD {
    Object <|-- ArrayList
}
package net.sourceforge.plantuml {
    Object <|-- Demo1
    Demo1 *- Demo2
}
@enduml

@startuml
scale 750 width
package foo1 <<Node>> {
    class Class1
}

package foo2 <<Rectangle>> {
    class Class2
}

package foo3 <<Folder>> {
    class Class3
}

package foo4 <<Frame>> {
    class Class4
}

package foo5 <<Cloud>> {
    class Class5
}

package foo6 <<Database>> {
    class Class6
}
@enduml

@startuml
skinparam PackageStyle rectangle

package foo1.foo2 {
}

package foo1.foo2.foo3 {
    class Object
}

foo1.foo2 +-- foo1.foo2.foo3
@enduml

@startuml
class BaseClass

namespace net.dummy #DDDDDD {
    .BaseClass <|-- Person
    Meeting o-- Person
    .BaseClass <|- Meeting
}

namespace net.foo {
    net.dummy.Person <|- Person
    .BaseClass <|-- Person
    net.dummy.Meeting o-- Person
}

BaseClass <|-- net.unused.Person
@enduml

@startuml
set namespaceSeparator ::
class X1::X2::foo {
    some info
}
@enduml

@startuml
set namespaceSeparator none
class X1.X2.foo {
    some info
}
@enduml

@startuml
class foo
bar ()- foo
@enduml

@startuml
Room o- Student
Room *-- Chair
@enduml

@startuml
Student -o Room
Chair --* Room
@enduml

@startuml
foo -left-> dummyLeft
foo -right-> dummyRight
foo -up-> dummyUp
foo -down-> dummyDown
@enduml

@startuml
class Student {
    Name
}
Student "0..*" - "1..*" Course
(Student, Course) .. Enrollment

class Enrollment {
    drop()
    cancel()
}
@enduml

@startuml
class Student {
    Name
}
Student "0..*" -- "1..*" Course
(Student, Course) . Enrollment

class Enrollment {
    drop()
    cancel()
}
@enduml

@startuml
skinparam class {
    BackgroundColor PaleGreen
    ArrowColor SeaGreen
    BorderColor SpringGreen
}
skinparam StereotypeCBackgroundColor YellowGreen

Class01 "1" *-- "many" Class02 : contains
Class03 o-- Class04 : aggregation
@enduml

@startuml
skinparam class {
    BackgroundColor PaleGreen
    ArrowColor SeaGreen
    BorderColor SpringGreen
    BackgroundColor<<Foo>> Wheat
    BorderColor<<Foo>> Tomato
}
skinparam StereotypeCBackgroundColor YellowGreen
skinparam StereotypeCBackgroundColor<<Foo>> DimGray

Class01 <<Foo>>
Class03 <<Foo>>
Class01 "1" *-- "many" Class02 : contains

Class03 o-- Class04 : aggregation

@enduml

@startuml
skinparam BackgroundColor AntiqueWhite/Gold
skinparam ClassBackgroundColor Wheat|CornflowerBlue

class Foo #red-green
note left of Foo #blue\9932CC
    this is my
    note on this class
end note

package example #GreenYellow/LightGoldenRodYellow {
    class Dummy
}
@enduml

@startuml
class Bar1
class Bar2
together {
    class Together1
    class Together2
    class Together3
}
Together1 - Together2
Together2 - Together3
Together2 -[hidden]--> Bar1
Bar1 -[hidden]> Bar2
@enduml

@startuml
' Split into 4 pages
page 2x2
skinparam PageMargin 10
skinparam PageExternalColor gray
skinparam PageBorderColor black

class BaseClass

namespace net.dummy #DDDDDD {
    .BaseClass <|-- Person
    Meeting o-- Person
    .BaseClass <|- Meeting
}

namespace net.foo {
    net.dummy.Person <|- Person
    .BaseClass <|-- Person
    net.dummy.Meeting o-- Person
}

BaseClass <|-- net.unused.Person
@enduml

@startuml
(*) --> "First Activity"
"First Activity" --> (*)
@enduml

@startuml
(*) --> "First Activity"
--> [You can put also labels] "Second Activity"
--> (*)
@enduml

@startuml
(*) -up-> "First Activity"
-right-> "Second Activity"
--> "Third Activity"
-left-> (*)
@enduml

@startuml
(*) --> "Initialization"

if "Some Test" then
    -->[true] "Some Activity"
    --> "Another activity"
    -right-> (*)
else
    ->[false] "Something else"
    --> [Ending Process] (*)
endif
@enduml

@startuml
(*) --> "check input"
If "input is vervose" then
    --> [Yes] "turn on verbosity"
    --> "run command"
else
    --> "run command"
Endif
--> (*)
@enduml

@startuml
(*) --> if "Some Test" then
    -->[true] "activity 1"

    if "" Then
        -> "activity 3" as a3
    else
        if "Other test" then
            -left-> "activity 5"
        else
            --> "activity 6"
        endif
    endif
else
    ->[flase] "activity 2"
endif

a3 --> if "last test" then
    --> "actibity 7"
else
    -> "activity 8"
endif
@enduml

@startuml
(*) --> ===B1===
--> "Parallel Activity 1"
--> ===B2===

===B1=== --> "Parallel Activity 2"
--> ===B2===

--> (*)
@enduml

@startuml
(*) -left-> "this <size:20>activity</size>
is <b>very</b> <color:red>long2</color>
and defined on several llines
that contains many <i>text</i>" as A1

-up-> "Another activity\n on several lines"

A1 --> "Short activity <img:sourceforge.jpg>"
@enduml

@startuml
(*) --> "Some Activity"
note right : This activity has to be defined
"Some Activity" --> (*)
note left
    This note is on
    several lines
end note
@enduml

@startuml
partition Conductor {
    (*) --> "Climbs on Platform"
    --> ===S1===
    --> Bows
}

partition Audience #LightSkyBlue {
    ===S1=== --> Applauds
}

partition Conductor {
    Bows --> ===S2===
    --> WavesArmes
    Applauds --> ===S2===
}

partition Orchestra #CCCCEE {
    WavesArmes --> Introduction
    --> "Play music"
}
@enduml

@startuml
skinparam BackgroundColor #AAFFFF
skinparam activity {
    StartColor red
    BarColor SaddleBrown
    EndColor Silver
    BackgroundColor Peru
    BackgroundColor<< Begin >> Olive
    BorderColor Peru
    FontName Impact
}

(*) --> "Climbs on Platform" << Begin >>
--> === S1 ===
--> Bows
--> === S2 ===
--> WavesArmes
--> (*)
@enduml

@startuml
'Default is skinparam activityShape roudBox
skinparam activityShape octagon

(*) --> "First Activity"
"First Activity" --> (*)
@enduml

@startuml
title Servlet Container
(*) --> "ClickServlet.handleRequest()"
--> "New Page"

if "Page.onSecurityCheck" then
    ->[true] "Page.onInit()"

    if "isForward?" then
        ->[no] "Process controls"

        if "continue processing?" then
            -->[yes] ===RENDERING===
        else
            -->[no] ===REDIRECT_CHECK===
        endif
    else
        -->[yes] ===RENDERING===
    endif

    if "is Post?" then
        -->[yes] "Page.onPost()"
        --> "Page.OnRender()" as render
        --> ===REDIRECT_CHECK===
    else
        -->[no] "Page.onGet()"
        --> render
    endif

else
    -->[false] ===REDIRECT_CHECK===
endif

if "Do redirect?" then
    ->[yes] "redirect request"
    --> ==BEFORE_DESTROY===
else
    if "Do Forward?" then
        -left->[yes] "Forward request"
        --> ==BEFORE_DESTROY===
    else
        -right->[no] "Render page template"
        --> ==BEFORE_DESTROY===
    endif
endif

--> "Page.onDestroy()"
-->(*)

@enduml

@startuml
:Hello world;
:This is on defined on
several **lines**;
@enduml

@startuml
start
:Hello world;
:This is on defined on
several **lines**;
stop
@enduml

@startuml
start
:Hello world;
:This is on defined on
several **lines**;
end
@enduml

@startuml
start
if (Graphviz installed?) then (yes)
    :process all\ndiagrams;
else (no)
    :process only
    __sequence__ and __activity__ deagrams;
endif
stop
@enduml

@startuml
start
if (condition A) then (yes)
    :Text 1;
elseif (condition B) Then (yes)
    :Text 2;
    stop
elseif (condition C) then (yes)
    :Text 3;
elseif (condition D) then (yes)
    :Text 4;
else (nothing)
    :Text else;
endif
stop
@enduml

@startuml
start
repeat
    :read data;
    :generate diagrams;
repeat while (more data?)
stop
@enduml

@startuml
start
while (data available?)
    :read data;
    :generate diagrams;
endwhile

stop
@enduml

@startuml
while (check filesize ?) is (not empty)
    :read file;
endwhile (empty)
:close file;
@enduml

@startuml
start
if (multiprocesser?) then (yes)
    fork
    :Treatment 1;
    fork again
    :treatment 2;
    end fork
else (monoproc)
    :treatment 1;
    :treatment 2;
!endif
@enduml

@startuml
:foo1;
floating note left: This is a note
:foo2;
note right
    This note is on several
    //lines// and can
    contain <b>HTML</b>
    ====
    * Calling the method ""foo()"" is prohibited
end note
stop
@enduml

@startuml
start
:starting progress;
#HotPink:reading configuration files
These files should edited at this point!;
#AAAAAA:ending of the process;
@enduml

@startuml
:foo1;
-> You can put text on arrows;
if (test) then
    -[#blue]->
    :foo2;
    -[#green,dashed]-> The text can
    also be on several lines
    and **vary** long...;
    :foo3;
else
    -[#black,dotted]->
    :foo4;
endif
-[#gray,bold]->
:foo5;
@enduml

@startuml
start
:Some activity;
(A)
detach
(A)
:Other activity;
@enduml

@startuml
start
partition Initialization {
    :read config file;
    :init internal variable;
}
partition Running {
    :wait for user interaction;
    :print information;
}
stop
@enduml

@startuml
|Swimlane1|
start
:foo1;
|#AntiqueWhite|Swimlane2|
:foo2;
:foo3;
|Swimlane1|
:foo4;
|Swimlane2|
:foo5;
stop
@enduml

@startuml
:start;
fork
    :foo1;
    :foo2;
fork again
    :foo3;
    detach
endfork
if (foo4) then
    :foo5;
    detach
endif
:foo6;
detach
:foo7;
stop
@enduml

@startuml
:Ready;
:next(o)|
:Receiving;
split
    :nak(i)<
    :ack(o)<
split again
    :ack(i)<
    :next(o)
    on several line|
    :i := i + 1]
    :ack(o)>
split again
    :err(i)<
    :nak(o)>
split again
    :foo/
split again
    :i > 5}
    stop
end split
:finish;
@enduml

@startuml
start
:「更新ボタンを押す」;
:new page;
if (Page.onSecurityCheck) then (true)
    :Page.onInit();
    if (isForwad?) then (no)
        :Process controls;
        if (continue processing?) then (no)
            stop
        endif

        if (isPost?) then (yes)
            :Page.onPost();
        else (no)
            :Page.onGet();
        endif
        :Page.onRender();
    endif
else (false)
endif

if (do redirect?) then (yes)
    :redirect process;
else
    if (do forward?) then (yes)
        :Forward request;
    else (no)
        :Render page template;
    endif
endif
stop
@enduml

@startuml
[First component]
[Another component] as Comp2
component Comp3
component [Last\ncompnent] as Comp4
@enduml

@startuml
() "First Interface"
() "Another interface" as Interf2
interface Interf3
interface "Last\ninterface" as Interf4
@enduml

@startuml
DataAccess - [First Component]
[First Component] ..> HTTP : use
@enduml

@startuml
interface "Data Access" as DA

DA - [First Component]
[First Component] ..> HTTP : use

note left of HTTP : Web Service only
note right of [First Component]
    A note can also
    be on several lines
end note
@enduml

@startuml
package "Some Group" {
    HTTP - [First Component]
    [Another Component]
}

node "Other Groups" {
    FTP - [Second Component]
    [First Component] --> FTP
}

cloud {
    [Example 1]
}

database "MySql" {
    folder "This is my folder" {
        [Folder 3]
    }
    frame "Foo" {
        [Frame 4]
    }
}

[Another Component] --> [Example 1]
[Example 1] --> [Folder 3]
[Folder 3] --> [Frame 4]
@enduml

@startuml
[Component] --> Interface1
[Component] -> Interface2
@enduml

@startuml
Interface1 <-- [Component]
Interface2 <- [Component]
@enduml

@startuml
[Component] -left-> left
[Component] -right-> right
[Component] -up-> up
[Component] -down-> down
@enduml

@startuml
skinparam ComponentStyle uml2

interface "Data Access" as DA

DA - [First Component]
[First Component] ..> HTTP : use
@enduml

@startuml
component comp1 [
    This component
    has a long comment
    on several lines
]
@enduml

@startuml
component [Web Server] #Yellow
@enduml

@startuml
sprite $businessProcess [16x16/16] {
    FFFFFFFFFFFFFFFF
    FFFFFFFFFFFFFFFF
    FFFFFFFFFFFFFFFF
    FFFFFFFFFFFFFFFF
    FFFFFFFFFF0FFFFF
    FFFFFFFFFF00FFFF
    FF00000000000FFF
    FF000000000000FF
    FF00000000000FFF
    FFFFFFFFFF00FFFF
    FFFFFFFFFF0FFFFF
    FFFFFFFFFFFFFFFF
    FFFFFFFFFFFFFFFF
    FFFFFFFFFFFFFFFF
    FFFFFFFFFFFFFFFF
    FFFFFFFFFFFFFFFF
}

rectangle "End to End\nbusiness process" <<$businessProcess>> {
    rectangle "inner process 1" <<$businessProcess>> as src
    rectangle "inner process 2" <<$businessProcess>> as tgt
    src -> tgt
}
@enduml

@startuml
skinparam interface {
    BackgroundColor RosyBrown
    BorderColor orange
}

skinparam component {
    FontSize 13
    BackgroundColor <<Apache>> Red
    BorderColor<<Apache>> #FF6655
    FontName Courier
    BorderColor black
    BackgroundColor gold
    ArrowFontName Impact
    ArrowColor #FF6655
    ArrowFontColor #777777
}

() "Data Access" as DA

DA - [First Component]
[First Component] ..> () HTTP : use
HTTP - [Web Server] << Apache >>
@enduml

@startuml
[AA] <<static lib>>
[BB] <<shared lib>>
[CC] <<static lib>>

node node1
node node2 <<shared node>>
database Production

skinparam component {
    backgroundColor<<static lib>> DarkKhaki
    backgroundColor<<shared lib>> Green
}

skinparam node {
    borderColor Green
    backgroundColor Yellow
    backgroundColor<<shared node>> Magenta
}
skinparam DatabaseBackgroundColor aqua
@enduml

ステート図